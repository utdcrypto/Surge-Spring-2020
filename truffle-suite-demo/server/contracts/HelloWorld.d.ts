/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface HelloWorldInterface extends Interface {
  functions: {
    add_name: TypedFunctionDescription<{
      encode([name, value]: [string, BigNumberish]): string;
    }>;

    get_value: TypedFunctionDescription<{ encode([name]: [string]): string }>;

    name_in_map: TypedFunctionDescription<{ encode([name]: [string]): string }>;

    test: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {};
}

export class HelloWorld extends Contract {
  connect(signerOrProvider: Signer | Provider | string): HelloWorld;
  attach(addressOrName: string): HelloWorld;
  deployed(): Promise<HelloWorld>;

  on(event: EventFilter | string, listener: Listener): HelloWorld;
  once(event: EventFilter | string, listener: Listener): HelloWorld;
  addListener(eventName: EventFilter | string, listener: Listener): HelloWorld;
  removeAllListeners(eventName: EventFilter | string): HelloWorld;
  removeListener(eventName: any, listener: Listener): HelloWorld;

  interface: HelloWorldInterface;

  functions: {
    add_name(
      name: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    get_value(name: string): Promise<BigNumber>;

    name_in_map(name: string): Promise<boolean>;

    test(): Promise<number>;
  };

  add_name(
    name: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  get_value(name: string): Promise<BigNumber>;

  name_in_map(name: string): Promise<boolean>;

  test(): Promise<number>;

  filters: {};

  estimate: {
    add_name(name: string, value: BigNumberish): Promise<BigNumber>;

    get_value(name: string): Promise<BigNumber>;

    name_in_map(name: string): Promise<BigNumber>;

    test(): Promise<BigNumber>;
  };
}
